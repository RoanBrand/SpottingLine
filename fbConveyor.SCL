FUNCTION_BLOCK fbConveyor
TITLE = 'Normal Single Direction Conveyor for HDEP Spotting line'
VERSION : '2.0'
KNOW_HOW_PROTECT
AUTHOR : 'RF Brand'
//******************************************************************************************//
VAR_INPUT
(* Physical Inputs *)
    iButton_Go : BOOL;          // Button used to initiate product transport
    iButton_EStop : BOOL;       // Local EStop button
    iEStop_Global : BOOL;       // EStop Condition due to safety system.
    iPS : BOOL;                 // Rectoflective optical sensor located near end of conveyor
    iVSD_Rollers_F : BOOL;      // Rollers VSD Fault Alarm signal
(* Inter-Conveyor Messages *)
    iNeigh1 : INT;                  //      2     ^
    iNeigh2 : INT;                  //      |     |
    //  0-Nothing                   //   3-[C]-4  ^
    //  1-AbletoReceive             //      |     |
    //  2-YouMaySend                //      1     ^
    //  3-ReqtoSend
    //  4-ProductCleared
    //  5-SendingProduct
    //  6-ProductReceived
    //  7-ProductTooEarly
    //  9-CancelTransaction
(* Other *)
    iManual_Mode_Req : BOOL;    // User Request Manual Control of conveyor
(* Settings *)
    xConv_Behav : INT;  (* SPECIFY CONVEYOR BEHAVIOUR: *)
                        // 0-Basic 'Push to Go' Conveyor;
                        // 1-Automatic Pass on Product without user
    xSensor_offDelay : TIME := t#250ms; // Off-Delay time for photosensors
    xLoadOn_Conveyor : BOOL;    // Indicates products will be loaded by crane
END_VAR
VAR_OUTPUT
(* Physical Outputs *)
    oMotor_Rollers_Fwd : BOOL;  // Standard Conveyor Rollers
    oLamp_Indication : BOOL;    // Status light
(* Inter-Conveyor Messages *)
    oNeigh1 : INT; oNeigh2 : INT;   
(* Alarms *)
    oAlarmsOut : WORD;
    oAlarms AT oAlarmsOut : ARRAY[0..15] OF BOOL;
(*  oAlarms[0]  ->  "EStop Button Pressed"
    oAlarms[1]  ->  "Rollers VSD Fault"
    oAlarms[2]  ->  "Go Button being kept pressed in"
    oAlarms[3]  ->  "Momentary Obstruction: Photosensor broken and remade too fast"
    oAlarms[4]  ->  "Cancel Receive Process: Prev Conv not Sending"
    oAlarms[5]  ->  "Receive Timeout: "Product stuck on Conveyor"
    oAlarms[6]  ->  "Obstruction on next Conv while Sending"
    oAlarms[7]  ->  "Product not leaving while sending" *)
END_VAR
VAR
(* FINITE STATE MACHINE FOR CONVEYOR*)
    oldState : INT;                // NI -> Not Implemented
    State : INT;            // 0-RESET;
                            // 1-STANDBY;
                            // 2-ABLETORECEIVE;     15-RECEIVEBLIND;
                            // 3-RECEIVING;
                            // 4-RECEIVED(NI);      20-ESTOP;
                            // 5-ABLETOSEND;        21-VSDFAULT;
                            // 6-SENDING;           22-MANUAL;
                            
    intState : INT;    // Sub Statemachine used in some states
    tTimer : SFB4; // IEC On-Delay timers used for timing sequences
(* Keep track of photosensors *)
    tPS_Debounce : SFB5;    // IEC Off-Delay Timer used for debouncing product sensor
    // Check IF photosensor is momentarily broken AND remade in short TIME
    Momentary_obstruction : BOOL; // This can happen due to vibration or hand
    tMomentary : SFB4; // Used to make alarm
(* Handle Go button presses *)
    tGoTime : SFB4;
(* Manual Mode Button Control *)
    bM_HMI_Fwd : BOOL;
    bOld_Fwd : BOOL;
END_VAR
BEGIN
(* Inputs processing *)
tGoTime(IN := iButton_Go, PT := t#8s);
oAlarms[2] := tGoTime.Q; // if Button is kept in longer than 8s it is an alarm
tPS_Debounce(IN := iPS, PT := xSensor_offDelay); // Photosensor debounce

(* Generate Momentary Obstruction Alarm *)
IF tMomentary.Q THEN
    Momentary_obstruction := false;
END_IF;
tMomentary(IN := Momentary_obstruction, PT := t#2s);
oAlarms[3] := Momentary_obstruction;

(* STATE MACHINE CONTROL FLOW START *)
IF iEStop_Global THEN          // Emergency stop gets top priority in program
    IF (State <> 20) THEN
        State := 20;    // GOTO ESTOP
    END_IF;
ELSIF iVSD_Rollers_F THEN      // After that VSD Failure
    IF (State <> 21) THEN
        State := 21;    // GOTO VSDFAULT
    END_IF;
ELSIF iManual_Mode_Req THEN    // After that manual operation requests
    IF (State <> 22) THEN
        State := 22;    // GOTO MANUAL
    END_IF;
END_IF;
CASE State OF
    0 : // RESET
        tTimer(IN := false);
        oNeigh1 := 0; oNeigh2 := 0;
        oAlarmsOut := w#16#0; // 0x0000;
        oMotor_Rollers_Fwd := false;
        oLamp_Indication := false;
        oldState := 0;
        IF tPS_Debounce.Q THEN
            State := 1; // GOTO STANDBY
        ELSE
            State := 2; // GOTO ABLETORECEIVE
        END_IF;
    1 : // STANDBY
        IF oldState <> State THEN
            intState := 0;
            oldState := State;
        END_IF;
        oLamp_Indication := M0.3;
        CASE intState OF
            0 : IF (iButton_Go AND NOT tGoTime.Q) OR (xConv_Behav = 1) THEN
                    intState := 1;
                END_IF;
            1 : IF tGoTime.Q THEN
                    intState := 0;
                ELSIF NOT iButton_Go THEN   // Want to make sure button is released
                    IF tPS_Debounce.Q THEN
                        State := 5; // GOTO ABLETOSEND
                    ELSE
                        State := 2; // GOTO ABLETORECEIVE
                    END_IF;
                    oLamp_Indication := false; // Instead of state exit
                END_IF;
        END_CASE;
    2 : // ABLETORECEIVE
        IF oldState <> State THEN
            oNeigh1 := 1;
            intState := 0;
            oLamp_Indication := true;
            oldState := State;
        END_IF;
        IF tPS_Debounce.Q THEN
            IF xLoadOn_Conveyor THEN
                State := 5; // GOTO ABLETOSEND
            ELSE
                State := 1; // GOTO STANDBY
            END_IF;
        ELSIF (iNeigh1 = 3) THEN
            State := 3; // GOTO RECEIVING
        END_IF;
        IF iButton_Go AND NOT tGoTime.Q AND (intState = 0) THEN
            intState := 1;
        END_IF;
        IF (intState = 1) THEN
            IF tGoTime.Q THEN
                intState := 0;
            ELSIF NOT iButton_Go THEN
                tTimer(IN := false);
                State := 15;    // GOTO RECEIVEBLIND
            END_IF;
        END_IF;
        IF oldState <> State THEN
            oNeigh1 := 0;
            oLamp_Indication := false;
        END_IF;
    3 : // RECEIVING
        IF oldState <> State THEN
            tTimer(IN := false);
            intState := 0;
            oNeigh1 := 2;
            oMotor_Rollers_Fwd := true;
            oldState := State;
        END_IF;
        oLamp_Indication := M0.5;
        CASE intState OF
            0 : tTimer(IN := true, PT := t#1s);
                IF tTimer.Q THEN                    // Prev conv did not send
                    tTimer(IN := false);
                    oNeigh1 := 9;          // Cancel operation
                    oAlarms[4] := true;     // Generate HMI Alarm
                    oMotor_Rollers_Fwd := false;
                    intState := 10;
                ELSIF (iNeigh1 = 5) THEN            // Prev conv is sending
                    tTimer(IN := false);
                    oNeigh1 := 0;          
                    intState := 1;
                END_IF;
            1 : IF tPS_Debounce.Q THEN              // Sensor set too early    
                    oNeigh1 := 7;          // Tell prev conv product arrived too early
                    oMotor_Rollers_Fwd := false;
                    intState := 11;
                ELSIF iNeigh1 = 4 THEN             // Prev conv is done    
                    intState := 2;
                END_IF;
            2 : tTimer(IN := true, PT := t#15s);
                IF tTimer.Q THEN                    // Product failed to arrive
                    tTimer(IN := false);
                    oAlarms[5] := true;     // Generate HMI Alarm
                    oMotor_Rollers_Fwd := false;
                    intState := 10;
                ELSIF tPS_Debounce.Q THEN           // Product has arrived
                    tTimer(IN := false);
                    oNeigh1 := 6;
                    oMotor_Rollers_Fwd := false;
                    intState := 3;
                END_IF;
            3 : tTimer(IN := true, PT := t#550ms);
                IF NOT iPS THEN                     // Suspect obstruction
                    Momentary_obstruction := true;
                    State := 1; // GOTO STANDBY
                ELSIF tTimer.Q THEN                 // Assume product has arrived
                    State := 5; // GOTO ABLETOSEND
                END_IF;
           10 : tTimer(IN := true, PT := t#2s);     // Wait
                IF tTimer.Q THEN
                    State := 1; // GOTO STANDBY
                END_IF;
           11 : tTimer(IN := true, PT := t#550ms);  // Early Receive. Error by Prev Conv.
                IF NOT iPS THEN
                    Momentary_obstruction := true;
                    State := 1; // GOTO STANDBY
                ELSIF tTimer.Q THEN
                    State := 1; // GOTO STANDBY
                END_IF;
        END_CASE;
        IF iNeigh1 = 9 THEN
            State := 1; // GOTO STANDBY
        END_IF;
        IF oldState <> State THEN
            oNeigh1 := 0;
            oAlarms[4] := false;
            oAlarms[5] := false;
            oMotor_Rollers_Fwd := false;
            oLamp_Indication := false;
        END_IF;
    5 : // ABLETOSEND
        IF oldState <> State THEN
            intState := 0;
            oLamp_Indication := true;
            oldState := State;
        END_IF;
        CASE xConv_Behav OF
            0 : IF iButton_Go AND NOT tGoTime.Q AND (iNeigh2 = 1) AND (intState = 0) THEN
                    intState := 1;
                END_IF;
            1 : IF (iNeigh2 = 1) AND (intState = 0) THEN
                    tTimer(IN := false);
                    intState := 2;
                END_IF;
        END_CASE;
        IF NOT tPS_Debounce.Q THEN
            State := 1; // GOTO STANDBY
        ELSE CASE intState OF
            0 : oNeigh2 := 0;
            1 : IF tGoTime.Q THEN
                    intState := 0;
                ELSIF NOT iButton_Go THEN
                    tTimer(IN := false);
                    intState := 2;
                END_IF;
            2 : tTimer(IN := true, PT := t#1s);
                oNeigh2 := 3;
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    intState := 0;
                ELSIF (iNeigh2 = 2) THEN
                    State := 6;    // GOTO SENDING
                END_IF;
        END_CASE; 
        END_IF;
        IF oldState <> State THEN
            oNeigh2 := 0;
            oLamp_Indication := false;
        END_IF;
    6 : // SENDING
        IF oldState <> State THEN
            tTimer(IN := false);
            intState := 0;
            oNeigh2 := 5;
            oMotor_Rollers_Fwd := true;
            oldState := State;
        END_IF;
        oLamp_Indication := M0.5;
        CASE intState OF
            0 : tTimer(IN := true, PT := t#25s);
                IF tTimer.Q THEN                // Product not leaving
                    tTimer(IN := false);
                    oNeigh2 := 9;
                    oAlarms[7] := true;
                    intState :=10;
                ELSIF (iNeigh2 = 7) THEN         // Next Conv reports obstruction
                    tTimer(IN := false);
                    oAlarms[6] := true;
                    intState := 10;
                ELSIF NOT tPS_Debounce.Q THEN     // Product has left the Conv
                    tTimer(IN := false);
                    oNeigh2 := 4;
                    intState := 1;
                END_IF;
                IF (tTimer.ET >= t#20s) THEN // Product taking too long to leave
                    oMotor_Rollers_Fwd := false;
                END_IF;
            1 : tTimer(IN := true, PT := t#3s); // Keep on to clear product
                IF tTimer.Q OR (iNeigh2 = 6) THEN
                    State := 2; // GOTO ABLETORECEIVE
                END_IF;
           10 : tTimer(IN := true, PT := t#2s); // Wait for alarm
                oMotor_Rollers_Fwd := false;
                IF tTimer.Q THEN
                    State := 1; // GOTO STANDBY
                END_IF;
        END_CASE;
        IF oldState <> State THEN
            oNeigh2 := 0;
            oAlarms[6] := false;
            oAlarms[7] := false;
            oMotor_Rollers_Fwd := false;
            oLamp_Indication := false;
        END_IF;
   15 : // RECEIVEBLIND
        IF oldState <> State THEN
            tTimer(IN := false);
            oMotor_Rollers_Fwd := true;
            oldState := State;
        END_IF;
        oLamp_Indication := M0.5;
        tTimer(IN := true, PT := t#20s);
        IF tTimer.Q THEN
            State := 1; // GOTO STANDBY
        ELSIF tPS_Debounce.Q THEN
            State := 5; // GOTO ABLETOSEND
        END_IF;
        IF oldState <> State THEN
            oMotor_Rollers_Fwd := false;
            oLamp_Indication := false;
        END_IF;
   20 : // ESTOP
        IF oldState <> State THEN
            oMotor_Rollers_Fwd := false;
            oldState := State;
        END_IF;
        oAlarms[0] := iButton_EStop;
        IF iButton_EStop THEN
            oLamp_Indication := M0.2;
        ELSE
            oLamp_Indication := M0.5;
        END_IF;
        IF NOT iEStop_Global THEN
            State := 0; // GOTO RESET
        END_IF;
   21 : // VSDFAULT
        oAlarms[1] := true;
        IF oldState <> State THEN
            oNeigh1 := 9;
            oNeigh2 := 9;
            oldState := State;
        END_IF;
        IF NOT iVSD_Rollers_F THEN
            State := 0; // GOTO RESET
        END_IF;
   22 : // MANUAL
        IF oldState <> State THEN
            oNeigh1 := 0;
            oNeigh2 := 0;
            bM_HMI_Fwd := false;
            oMotor_Rollers_Fwd := false;
            oLamp_Indication := true;
            oldState := State;
        END_IF;
        oLamp_Indication := M0.7;
        IF oMotor_Rollers_Fwd AND NOT bOld_Fwd THEN // HMI control    
            bM_HMI_Fwd := true;
        ELSIF bOld_Fwd AND NOT oMotor_Rollers_Fwd THEN
            bM_HMI_Fwd := false;
        END_IF;
        oMotor_Rollers_Fwd := bM_HMI_Fwd OR (iButton_Go AND NOT tGoTime.Q);
        bOld_Fwd := oMotor_Rollers_Fwd;
        IF oMotor_Rollers_Fwd THEN
            oLamp_Indication := M0.1;
        END_IF;
        IF NOT iManual_Mode_Req THEN
            State := 0; // Goto RESET
        END_IF;
END_CASE;
END_FUNCTION_BLOCK
