FUNCTION_BLOCK fbTilting
TITLE = 'Tilting station for HDEP Spotting line'
VERSION : '1.0'
KNOW_HOW_PROTECT
AUTHOR : 'RF Brand'
//******************************************************************************************//
VAR_INPUT
(* Physical Inputs *)
    iButton_Go : BOOL;          // Button used to initiate product transport
    iButton_DirSel : BOOL;      // 2-Way Fwd/Rev Switch indicating desired rollers dir
    iButton_DirTilt : BOOL;     // 2-Way Up/Dwn Switch for Tilting Unit. High -> Tilt
    iButton_DHS : BOOL;         // Dual-Handed start input for Tilting Unit
    iButton_EStop : BOOL;       // Local EStop button
    iEStop_Global : BOOL;       // EStop Condition due to safety system
    iPS : BOOL;                 // Inductive prox for sensing products
    iObs1, iObs2 : BOOL;        // Rectoflective obstruction sensors on sides
    iVSD_Rollers_F : BOOL;      // Rollers VSD Fault Alarm signal
    iMotor_Hydr_Trip : BOOL;    // Hydraulic pack motor overload
    iSafeTrip : BOOL;           // Safety Circuit active. High when healthy.
    iValve_Bot_Ret : BOOL;      // Product is lowered
    iValve_Bot_Ext : BOOL;      // Product is lifted
    iValve_Side_Ret : BOOL;     // Product released on side
    iValve_Side_Ext : BOOL;     // Product is clamped from side
    iValve_Pis_Ret : BOOL;      // Push piston fully retracted
    iValve_Top_Ret : BOOL;      // Product released on top
    iValve_Tilt_Ext : BOOL;     // Roller table is level
(* Inter-Conveyor Messages *)
    iNeigh1 : INT;                  //      2     ^
    iNeigh2 : INT;                  //      |     |
    //  0-Nothing                   //   3-[C]-4  ^
    //  1-AbletoReceive             //      |     |
    //  2-YouMaySend                //      1     ^
    //  3-ReqtoSend
    //  4-ProductCleared
    //  5-SendingProduct
    //  6-ProductReceived
    //  7-ProductTooEarly
    //  9-CancelTransaction
(* Other *)
    iManual_Mode_Req : BOOL;    // User Request Manual Control of conveyor
(* Settings *)
    xConv_Behav : INT;  (* SPECIFY CONVEYOR BEHAVIOUR: *)
                        // 0-Basic 'Push to Go' Conveyor;
                        // 1-Automatic Pass on Product without user
    xSensor_offDelay : TIME := t#100ms; // Off-Delay time for photosensors
END_VAR
VAR_OUTPUT
(* Physical Outputs *)
    oMotor_Rollers_Fwd : BOOL;  // Standard Conveyor Rollers
    oMotor_Rollers_Rev : BOOL;
    oMotor_Hydraulic : BOOL;    // Hydraulic pack motor
    oValve_Dump : BOOL;         // Enable Hydraulic pressure
    oValve_Bot_Ret : BOOL;      // Lower product onto rollers
    oValve_Bot_Ext : BOOL;      // Lift product off rollers
    oValve_Side_Ret : BOOL;     // Release product from side
    oValve_Side_Ext : BOOL;     // Clamp product on side
    oValve_Pis_Ret : BOOL;      // Retract push piston
    oValve_Pis_Ext : BOOL;      // Extend push piston
    oValve_Top_Ret : BOOL;      // Release product from top
    oValve_Top_Ext : BOOL;      // Clamp product on top
    oValve_Tilt_Ret : BOOL;     // Tilt the Table
    oValve_Tilt_Ext : BOOL;     // Tilt the Table back
    oLamp_Indication : BOOL;    // Status light
(* Inter-Conveyor Messages *)
    oNeigh1 : INT; oNeigh2 : INT;
(* Alarms *)
    oAlarmsOut : WORD;          // Used for passing messages and alarms to HMI
    oAlarms AT oAlarmsOut : ARRAY[0..15] OF BOOL;
(*  oAlarms[0]  ->  "EStop Button Pressed"
    oAlarms[1]  ->  "Rollers VSD Fault"
    oAlarms[2]  ->  "Go Button being kept pressed in"
    oAlarms[3]  ->  "Momentary Obstruction: Photosensor broken and remade too fast"
    oAlarms[4]  ->  "Cancel Receive Process: Prev Conv not Sending"
    oAlarms[5]  ->  "Receive Timeout: "Product stuck on Conveyor"
    oAlarms[6]  ->  "Obstruction on next Conv while Sending"
    oAlarms[7]  ->  "Product not leaving while sending" 
    oAlarms[8]  ->  "Safety Circuit Engaged. Please reset at Tilting station" 
    oAlarms[9]  ->  "Hydrapack motor overload"
    oAlarms[10] ->  "Cannot Tilt: Obstruction detected on conveyor sides"
    *)
    oTiltAlarms : WORD; // Tilting station specific alarms
    oTiltAlarm AT oTiltAlarms : ARRAY[0..15] OF BOOL;
(*  oTiltAlarm[0]   ->  "Cannot lift product off rollers"
    oTiltAlarm[1]   ->  "Cannot secure product on side"
    oTiltAlarm[2]   ->  "Cannot retract piston on other side"
    oTiltAlarm[3]   ->  "Cannot tilt roller table back"
    oTiltAlarm[4]   ->  "Cannot release top clamp"
    oTiltAlarm[5]   ->  "Cannot release product on sides"
    oTiltAlarm[6]   ->  "Cannot lower product back onto rollers" *)
END_VAR
VAR
(* FINITE STATE MACHINE FOR CONVEYOR*)
    oldState : INT;                // NI -> Not Implemented
    State : INT;            // 0-RESET;
                            // 1-STANDBY;           17-CENTREPRD;
                            // 2-ABLETORECEIVE;     18-TILTING;
                            // 3-RECEIVING;
                            // 4-RECEIVED(NI);      20-ESTOP;
                            // 5-ABLETOSEND;        21-VSDFAULT;
                            // 6-SENDING;           22-MANUAL;
                            
    intState : INT;    // Sub Statemachine used in some states
    tTimer : SFB4;          // IEC On-Delay timers used for timing sequences
(* Keep track of photosensors *)
    tObs1_Debounce : SFB5;   // IEC Off-Delay Timer used for debouncing product sensors
    tObs2_Debounce : SFB5;
    // Check IF photosensor is momentarily broken AND remade in short TIME
    tMomentary : SFB4; // Used to make alarm
    Momentary_obstruction : BOOL; // This can happen due to vibration or hand
    lastSensState : BOOL; // Keep track of photosensor state changes
(* Handle and check Go button presses *)
    tGoTime : SFB4;
(* Manual Mode Control for HMI and Field Buttons *)
    bM_HMI_Fwd : BOOL;
    bM_HMI_Rev : BOOL;
    bOld_Fwd : BOOL;
    bOld_Rev : BOOL;
(* Other *)
    bReceivefrom1 : BOOL; // Flag to indicate what conv we receive from
    bSendto2 : BOOL; // Flag indicate what conv we send to
    tHydraMotorOff : SFB5;
END_VAR
BEGIN
(* Inputs processing *)
tGoTime(IN := iButton_Go, PT := t#8s);
oAlarms[2] := tGoTime.Q; // if Button is kept in longer than 8s it is an alarm
tObs1_Debounce(IN := iObs1, PT := xSensor_offDelay); // Photosensor debounce
tObs2_Debounce(IN := iObs2, PT := xSensor_offDelay); // Photosensor debounce
oAlarms[8] := NOT iSafeTrip; // Tilting station local safety circuit triggered
oAlarms[9] := iMotor_Hydr_Trip; // Motor overload @ hydrapack

(* Generate Momentary Obstruction Alarm *)
IF tMomentary.Q THEN
    Momentary_obstruction := false;
END_IF;
tMomentary(IN := Momentary_obstruction, PT := t#2s);
oAlarms[3] := Momentary_obstruction;

(* STATE MACHINE CONTROL FLOW START *)
IF iEStop_Global THEN           // Emergency stop gets top priority in program
    IF (State <> 20) THEN
        State := 20;    // GOTO ESTOP
    END_IF;
ELSIF iVSD_Rollers_F THEN       // After that Motor failure
    IF (State <> 21) THEN
        State := 21;    // GOTO VSDFAULT
    END_IF;
ELSIF iManual_Mode_Req THEN     // After that manual operation requests
    IF (State <> 22) THEN
        State := 22;    // GOTO MANUAL
    END_IF;
END_IF;
CASE State OF
    0 : // RESET
        tTimer(IN := false);
        oNeigh1 := 0; oNeigh2 := 0;
        oAlarmsOut := w#16#0; // 0x0000;
        oTiltAlarms := w#16#0; // 0x0000;
        oMotor_Rollers_Fwd := false;
        oMotor_Rollers_Rev := false;
        oMotor_Hydraulic := false;
        oValve_Dump := false;
        oValve_Bot_Ret := false;
        oValve_Bot_Ext := false;
        oValve_Side_Ret := false;
        oValve_Side_Ext := false;
        oValve_Pis_Ret := false;
        oValve_Pis_Ext := false;
        oValve_Top_Ret := false;
        oValve_Top_Ext := false;
        oValve_Tilt_Ret := false;
        oValve_Tilt_Ext := false;
        oLamp_Indication := false;
        oldState := 0;
        IF (tObs1_Debounce.Q OR tObs2_Debounce.Q OR iPS OR NOT iValve_Tilt_Ext) THEN
            State := 1; // GOTO STANDBY
        ELSE
            State := 2; // GOTO ABLETORECEIVE
        END_IF;
    1 : // STANDBY
        IF oldState <> State THEN
            intState := 0;
            oldState := State;
        END_IF;
        oLamp_Indication := M0.3;
        CASE intState OF
            0 : IF (iButton_Go AND NOT tGoTime.Q) THEN
                    intState := 1;
                END_IF;
            1 : IF tGoTime.Q THEN
                    intState := 0;
                ELSIF NOT iButton_Go THEN   // Want to make sure button is released
                    IF NOT iValve_Tilt_Ext THEN
                        State := 18; // GOTO TILTING
                    ELSIF (tObs1_Debounce.Q XOR tObs2_Debounce.Q) THEN
                        State := 17; // GOTO CENTREPRODUCT
                    ELSIF iPS THEN
                        State := 5; // GOTO ABLETOSEND
                    ELSE
                        State := 2; // GOTO ABLETORECEIVE
                    END_IF;
                    oLamp_Indication := false; // Instead of state exit
                END_IF;
        END_CASE;
    2 : // ABLETORECEIVE
        IF oldState <> State THEN
            oNeigh1 := 1;
            oNeigh2 := 1;
            oLamp_Indication := true;
            oldState := State;
        END_IF;
        IF (tObs1_Debounce.Q OR tObs2_Debounce.Q OR iPS) THEN
            State := 1; // GOTO STANDBY
        ELSIF (iNeigh1 = 3) THEN
            bReceivefrom1 := true;
            State := 3;     // GOTO RECEIVING
        ELSIF (iNeigh2 = 3) THEN
            bReceivefrom1 := false;
            State := 3;     // GOTO RECEIVING
        END_IF;
        IF oldState <> State THEN
            oNeigh1 := 0; oNeigh2 := 0;
            oLamp_Indication := false;
        END_IF;
    3 : // RECEIVING
        IF oldState <> State THEN
            tTimer(IN := false);
            intState := 0;
            IF bReceivefrom1 THEN
                oNeigh1 := 2;
                oMotor_Rollers_Fwd := true;
            ELSE
                oNeigh2 := 2;
                oMotor_Rollers_Rev := true;
            END_IF;
            oldState := State;
        END_IF;
        oLamp_Indication := M0.5;
        CASE intState OF
            0 : tTimer(IN := true, PT := t#1s);
                IF tTimer.Q THEN                                // Prev conv did not send
                    tTimer(IN := false);
                    oNeigh1 := 9; oNeigh2 := 9;
                    oAlarms[4] := true;
                    intState := 10;
                ELSIF ((iNeigh1 = 5) AND bReceivefrom1) OR      // Prev conv is sending
                      ((iNeigh2 = 5) AND NOT bReceivefrom1) THEN
                    tTimer(IN := false);
                    oNeigh1 := 0; oNeigh2 := 0;
                    intState := 1;
                END_IF;
            1 : IF (tObs2_Debounce.Q AND bReceivefrom1) OR       // Sensor set too early
                   (tObs1_Debounce.Q AND NOT bReceivefrom1) THEN
                    oNeigh1 := 7; oNeigh2 := 7;
                    intState := 11;
                ELSIF ((iNeigh1 = 4) AND bReceivefrom1) OR      // Prev conv is done
                      ((iNeigh2 = 4) AND NOT bReceivefrom1) THEN    
                    intState := 2;
                END_IF;
            2 : tTimer(IN := true, PT := t#15s);
                IF tTimer.Q THEN                                // Product failed to arrive
                    tTimer(IN := false);
                    oAlarms[5] := true;
                    intState := 10;
                ELSIF (tObs2_Debounce.Q AND bReceivefrom1) OR    // Product has arrived
                      (tObs1_Debounce.Q AND NOT bReceivefrom1) THEN
                    tTimer(IN := false);
                    oNeigh1 := 6; oNeigh2 := 6;
                    oMotor_Rollers_Fwd := false;
                    oMotor_Rollers_Rev := false;
                    intState := 3;
                END_IF;
            3 : tTimer(IN := true, PT := t#550ms);
                IF (NOT iObs2 AND bReceivefrom1) OR              // Suspect obstruction
                   (NOT iObs1 AND NOT bReceivefrom1) THEN
                    Momentary_obstruction := true;
                    State := 1; // GOTO STANDBY
                ELSIF tTimer.Q THEN
                    IF iPS THEN
                        State := 17; // GOTO CENTREPRODUCT
                    ELSE
                        State := 1;
                    END_IF;
                END_IF;
           10 : tTimer(IN := true, PT := t#2s);     // Wait
                oMotor_Rollers_Fwd := false; oMotor_Rollers_Rev := false;
                IF tTimer.Q THEN
                    State := 1; // GOTO STANDBY
                END_IF;
           11 : tTimer(IN := true, PT := t#550ms);  // Early Receive. Error by Prev Conv.
                oMotor_Rollers_Fwd := false; oMotor_Rollers_Rev := false;
                IF (NOT iObs2 AND bReceivefrom1) OR
                   (NOT iObs1 AND NOT bReceivefrom1) THEN
                    Momentary_obstruction := true;
                    State := 1; // GOTO STANDBY
                ELSIF tTimer.Q THEN
                    State := 1; // GOTO STANDBY
                END_IF;
        END_CASE;
        IF ((iNeigh1 = 9) AND bReceivefrom1) OR
           ((iNeigh2 = 9) AND NOT bReceivefrom1) THEN
            State := 1; // GOTO STANDBY
        END_IF;
        IF oldState <> State THEN
            oNeigh1 := 0; oNeigh2 := 0;
            oAlarms[4] := false;
            oAlarms[5] := false;
            oMotor_Rollers_Fwd := false;
            oMotor_Rollers_Rev := false;
            oLamp_Indication := false;
        END_IF;
    5 : // ABLETOSEND
        IF oldState <> State THEN
            intState := 0;
            oLamp_Indication := true;
            oldState := State;
        END_IF;
        IF iButton_DHS THEN
            IF (tObs1_Debounce.Q OR tObs2_Debounce.Q) THEN
                oAlarms[10] := true;
            ELSE
                State := 18;    // GOTO TILTING
            END_IF;
        ELSIF (intState = 0) AND (((xConv_Behav=0) AND iButton_Go AND NOT tGoTime.Q) OR xConv_Behav=1) THEN
            IF (iButton_DirSel AND (iNeigh2 = 1)) THEN
                bSendto2 := true;
                intState := 1;
            ELSIF (NOT iButton_DirSel AND (iNeigh1 = 1)) THEN
                bSendto2 := false;
                intState := 1;
            END_IF;
        END_IF;
        IF NOT iPS THEN
            State := 1; // GOTO STANDBY
        ELSE CASE intState OF
            0 : oNeigh1 := 0; oNeigh2 := 0;
            1 : IF tGoTime.Q THEN
                    intState := 0;
                ELSIF NOT iButton_Go THEN
                    tTimer(IN := false);
                    intState := 2;
                END_IF;
            2 : tTimer(IN := true, PT := t#1s);
                IF bSendto2 THEN
                    oNeigh2 := 3;
                ELSE
                    oNeigh1 := 3;
                END_IF;
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    intState := 0;
                ELSIF (bSendto2 AND (iNeigh2 = 2)) OR
                      (NOT bSendto2 AND (iNeigh1 = 2)) THEN
                    State := 6;    // GOTO SENDING
                END_IF;
        END_CASE; 
        END_IF;
        IF oldState <> State THEN
            oNeigh1 := 0; oNeigh2 := 0;
            oAlarms[10] := false;
            oLamp_Indication := false;
        END_IF;
    6 : // SENDING
        IF oldState <> State THEN
            tTimer(IN := false);
            intState := 0;
            IF bSendto2 THEN
                oNeigh2 := 5;
                oMotor_Rollers_Fwd := true;
            ELSE
                oNeigh1 := 5;
                oMotor_Rollers_Rev := true;
            END_IF;
            lastSensState := false;
            oldState := State;
        END_IF;
        oLamp_Indication := M0.5;
        CASE intState OF
            0 : tTimer(IN := true, PT := t#25s);
                IF tTimer.Q THEN                        // Product not leaving
                    tTimer(IN := false);
                    IF bSendto2 THEN
                        oNeigh2 := 9;
                    ELSE
                        oNeigh1 := 9;
                    END_IF;
                    oAlarms[7] := true;
                    intState := 10;
                ELSIF (bSendto2 AND (iNeigh2 = 7)) OR   // Next Conv reports obstruction
                      (NOT bSendto2 AND (iNeigh1 = 7)) THEN
                    tTimer(IN := false);
                    oAlarms[6] := true;
                    intState := 10;
                ELSIF (bSendto2 AND lastSensState AND NOT tObs2_Debounce.Q) THEN // Product has left the Conv
                    tTimer(IN := false);
                    oNeigh2 := 4;
                    intState := 1;
                ELSIF (NOT bSendto2 AND lastSensState AND NOT tObs1_Debounce.Q) THEN
                    tTimer(IN := false);
                    oNeigh1 := 4;
                    intState := 1;
                END_IF;
                IF (tTimer.ET >= t#20s) THEN // Product taking too long to leave
                    oMotor_Rollers_Fwd := false;
                    oMotor_Rollers_Rev := false;
                END_IF;
            1 : tTimer(IN := true, PT := t#3s);         // Keep on to clear product
                IF tTimer.Q OR (iNeigh2 = 6) THEN
                    State := 2; // GOTO ABLETORECEIVE
                END_IF;
           10 : tTimer(IN := true, PT := t#2s);
                oMotor_Rollers_Fwd := false; oMotor_Rollers_Rev:= false;
                IF tTimer.Q THEN
                    State := 1; // GOTO STANDBY
                END_IF;
        END_CASE;
        IF bSendto2 THEN
            lastSensState := tObs2_Debounce.Q;
        ELSE
            lastSensState := tObs1_Debounce.Q;
        END_IF;
        IF oldState <> State THEN
            oNeigh1 := 0;
            oNeigh2 := 0;
            oAlarms[6] := false;
            oAlarms[7] := false;
            oMotor_Rollers_Fwd := false;
            oMotor_Rollers_Rev := false;
            oLamp_Indication := false;
        END_IF;
   17 : // Centre product on station
        IF oldState <> State THEN
            tTimer(IN := false);
            IF tObs1_Debounce.Q THEN
                oMotor_Rollers_Fwd := true;
                intState := 0;
            ELSIF tObs2_Debounce.Q THEN
                oMotor_Rollers_Rev := true;
                intState := 2;
            END_IF;
            oldState := State;
        END_IF;
        oLamp_Indication := M0.4;
        CASE intState OF
            0 : tTimer(IN := true, PT := t#5s); // move from 1 to 2
                IF tTimer.Q OR tObs2_Debounce.Q THEN
                    State := 1;
                ELSIF NOT tObs1_Debounce.Q THEN
                    tTimer(IN := false);
                    intState := 1;
                END_IF;
            1 : tTimer(IN := true, PT := t#5s);
                IF tTimer.Q THEN
                    State := 1;
                ELSIF tObs2_Debounce.Q THEN
                    tTimer(IN := false);
                    oMotor_Rollers_Fwd := false;
                    oMotor_Rollers_Rev := true;
                    intState := 2;
                END_IF;
            2 : tTimer(IN := true, PT := t#5s); // move from 2 to centre
                IF tTimer.Q THEN
                    State := 1;
                ELSIF NOT tObs2_Debounce.Q THEN
                    State := 5;
                END_IF;
        END_CASE;
        IF oldState <> State THEN
            oMotor_Rollers_Fwd := false;
            oMotor_Rollers_Rev := false;
            oLamp_Indication := false;
        END_IF;
   18 : // Tilting
        IF oldState <> State THEN
            tTimer(IN := false);
            IF iButton_DirTilt THEN
                intState := 0;
            ELSE
                intState := 6;
            END_IF;
            oldState := State;
        END_IF;
        tHydraMotorOff(IN := iButton_DHS, PT := t#180s);
        oMotor_Hydraulic := tHydraMotorOff.Q;
        oValve_Dump := iButton_DHS;
        oLamp_Indication := M0.4 AND iButton_DHS;
        IF NOT iSafeTrip OR iMotor_Hydr_Trip THEN
            intState := 50;
        END_IF;
        CASE intState OF
            0 : //Lift product first
                oValve_Bot_Ext := iButton_DHS;
                tTimer(IN := iButton_DHS, PT := t#5s);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oValve_Bot_Ext := false;
                    oTiltAlarm[0] := true;
                    intState := 100;
                ELSIF iValve_Bot_Ext AND NOT iValve_Bot_Ret THEN
                    tTimer(IN := false);
                    oValve_Bot_Ext := false;
                    intState := 1;
                ELSIF NOT iButton_DirTilt THEN
                    tTimer(IN := false);
                    oValve_Bot_Ext := false;
                    intState := 9;
                END_IF;
            1 : // Push product on side
                oValve_Side_Ext := iButton_DHS;
                tTimer(IN := iButton_DHS, PT := t#5s);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oValve_Side_Ext := false;
                    oTiltAlarm[1] := true;
                    intState := 100;
                ELSIF iValve_Side_Ext AND NOT iValve_Side_Ret THEN
                    tTimer(IN := false);
                    oValve_Side_Ext := false;
                    intState := 2;
                ELSIF NOT iButton_DirTilt THEN 
                    tTimer(IN := false);
                    oValve_Side_Ext := false;
                    intState := 8;
                END_IF;
            2 : // Extend push piston on other side
                oValve_Pis_Ext := iButton_DHS;
                IF iButton_DHS THEN
                    tTimer(IN := true, PT := t#3s); // accumalative behaviour
                END_IF;
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oValve_Pis_Ext := false;
                    intState := 3;
                ELSIF NOT iButton_DirTilt THEN 
                    tTimer(IN := false);
                    oValve_Pis_Ext := false;
                    intState := 8;
                END_IF;
            3 : // Retract push piston on other side
                oValve_Pis_Ret := iButton_DHS;
                tTimer(IN := iButton_DHS, PT := t#5s);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oValve_Pis_Ret := false;
                    oTiltAlarm[2] := true;
                    intState := 100;
                ELSIF iValve_Pis_Ret THEN
                    tTimer(IN := false);
                    oValve_Pis_Ret := false;
                    intState := 4;
                ELSIF NOT iButton_DirTilt THEN 
                    tTimer(IN := false);
                    oValve_Pis_Ret := false;
                    intState := 8;    
                END_IF;
            4 : // Begin clamping on top
                oValve_Top_Ext := iButton_DHS;
                IF iButton_DHS THEN
                    tTimer(IN := true, PT := t#3s); // accumalative behaviour
                END_IF;
                IF NOT iValve_Top_Ret AND tTimer.Q THEN
                    tTimer(IN := false);
                    oValve_Top_Ext := false;
                    intState := 5;
                ELSIF NOT iButton_DirTilt THEN
                    tTimer(IN := false);
                    oValve_Top_Ext := false;
                    intState := 7;
                END_IF;
            5 : // Tilt conveyor
                tTimer(IN := iButton_DHS, PT := t#30s);
                oValve_Tilt_Ret := iButton_DHS AND NOT tTimer.Q;
                IF NOT iButton_DirTilt THEN
                    tTimer(IN := false);
                    oValve_Tilt_Ret := false;
                    intState := 6;
                END_IF;
            6 : // Start tilting back
                oValve_Tilt_Ext := iButton_DHS;
                tTimer(IN := iButton_DHS, PT := t#30s);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oValve_Tilt_Ext := false;
                    oTiltAlarm[3] := true;
                    intState := 100;
                ELSIF iValve_Tilt_Ext THEN
                    tTimer(IN := false);
                    oValve_Tilt_Ext := false;
                    intState := 7;
                ELSIF iButton_DirTilt THEN
                    tTimer(IN := false);
                    oValve_Tilt_Ext := false;
                    intState := 5;
                END_IF;
            7 : // Release top clamp
                oValve_Top_Ret := iButton_DHS;
                tTimer(IN := iButton_DHS, PT := t#5s);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oValve_Top_Ret := false;
                    oTiltAlarm[4] := true;
                    intState := 100;
                ELSIF iValve_Top_Ret THEN
                    tTimer(IN := false);
                    oValve_Top_Ret := false;
                    intState := 8;
                ELSIF iButton_DirTilt THEN
                    tTimer(IN := false);
                    oValve_Top_Ret := false;
                    intState := 4;
                END_IF;
            8 : // Release side clamps
                oValve_Side_Ret := iButton_DHS;
                oValve_Pis_Ret := iButton_DHS AND NOT iValve_Pis_Ret;
                tTimer(IN := iButton_DHS, PT := t#5s);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oValve_Side_Ret := false;
                    oValve_Pis_Ret := false;
                    IF NOT iValve_Pis_Ret THEN
                        oTiltAlarm[2] := true;
                    END_IF;
                    oTiltAlarm[5] := true;
                    intState := 100;
                ELSIF iValve_Side_Ret AND NOT iValve_Side_Ext AND iValve_Pis_Ret THEN
                    tTimer(IN := false);
                    oValve_Side_Ret := false;
                    oValve_Pis_Ret := false;
                    intState := 9;
                ELSIF iButton_DirTilt THEN
                    tTimer(IN := false);
                    oValve_Side_Ret := false;
                    oValve_Pis_Ret := false;
                    intState := 1;
                END_IF;
            9 : // Lower product onto rollers
                oValve_Bot_Ret := iButton_DHS;
                tTimer(IN := iButton_DHS, PT := t#5s);
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    oValve_Bot_Ret := false;
                    oTiltAlarm[6] := true;
                    intState := 100;
                ELSIF iValve_Bot_Ret AND NOT iValve_Bot_Ext THEN
                    oValve_Bot_Ret := false;
                    oValve_Dump := false;
                    IF NOT iButton_DHS THEN
                        State := 5;
                    END_IF;
                ELSIF iButton_DirTilt THEN
                    tTimer(IN := false);
                    oValve_Bot_Ret := false;
                    intState := 0;
                END_IF;
           50 : // Local Safety Circuit Triggered or Hydrapack Motor Overload
                oMotor_Hydraulic := false;
                oValve_Dump := false;
                oLamp_Indication := M0.3;
                IF iSafeTrip AND NOT iMotor_Hydr_Trip THEN
                    tTimer(IN := false);
                    IF iButton_DirTilt THEN
                        intState := 0;
                    ELSE
                        intState := 6;
                    END_IF;
                END_IF;
          100 : // ERROR
                tTimer(IN := true, PT := t#2s);
                oValve_Dump := false;
                IF tTimer.Q THEN
                    oTiltAlarms := w#16#0; // Clear all Tilting related alarms
                    tTimer(IN := false);
                    IF iButton_DirTilt THEN
                        intState := 0;
                    ELSE
                        intState := 6;
                    END_IF;
                END_IF;
        END_CASE;
        IF oldState <> State THEN
            oMotor_Hydraulic := false;
            oValve_Dump := false;
            oLamp_Indication := false;
        END_IF;
   20 : // ESTOP
        IF oldState <> State THEN
            oMotor_Hydraulic := false;
            oValve_Dump := false;
            oMotor_Rollers_Fwd := false;
            oMotor_Rollers_Rev := false;
            oldState := State;
        END_IF;
        oAlarms[0] := iButton_EStop;
        IF iButton_EStop THEN
            oLamp_Indication := M0.2;
        ELSE
            oLamp_Indication := M0.5;
        END_IF;
        IF NOT iEStop_Global THEN
            State := 0; // GOTO RESET
        END_IF;
   21 : // VSDFAULT
        oAlarms[1] := true;
        IF oldState <> State THEN
            oNeigh1 := 9;
            oNeigh2 := 9;
            oldState := State;
        END_IF;
        IF NOT iVSD_Rollers_F THEN
            State := 0; // GOTO RESET
        END_IF;
   22 : // MANUAL
        IF oldState <> State THEN
            oNeigh1 := 0;
            oNeigh2 := 0;
            bM_HMI_Fwd := false;
            bM_HMI_Rev := false;
            oMotor_Rollers_Fwd := false;
            oMotor_Rollers_Rev := false;
            oMotor_Hydraulic := false;
            oValve_Dump := false;
            oValve_Bot_Ret := false;
            oValve_Bot_Ext := false;
            oValve_Side_Ret := false;
            oValve_Side_Ext := false;
            oValve_Pis_Ret := false;
            oValve_Pis_Ext := false;
            oValve_Top_Ret := false;
            oValve_Top_Ext := false;
            oValve_Tilt_Ret := false;
            oValve_Tilt_Ext := false;
            oldState := State;
        END_IF;
        oLamp_Indication := M0.7;
        IF oMotor_Rollers_Fwd AND NOT bOld_Fwd THEN // HMI control
            bM_HMI_Fwd := true;
        ELSIF bOld_Fwd AND NOT oMotor_Rollers_Fwd THEN
            bM_HMI_Fwd := false;
        END_IF;
        IF oMotor_Rollers_Rev AND NOT bOld_Rev THEN
            bM_HMI_Rev := true;
        ELSIF bOld_Rev AND NOT oMotor_Rollers_Rev THEN
            bM_HMI_Rev := false;
        END_IF;
        oMotor_Rollers_Fwd := bM_HMI_Fwd OR (iButton_Go AND NOT tGoTime.Q AND iButton_DirSel);
        oMotor_Rollers_Rev := bM_HMI_Rev OR (iButton_Go AND NOT tGoTime.Q AND NOT iButton_DirSel);
        bOld_Fwd := oMotor_Rollers_Fwd;
        bOld_Rev := oMotor_Rollers_Rev;
        IF oMotor_Rollers_Fwd OR oMotor_Rollers_Rev THEN
            oLamp_Indication := M0.1;
        END_IF;
        IF NOT iManual_Mode_Req THEN
            State := 0; // Goto RESET
        END_IF;
END_CASE;
END_FUNCTION_BLOCK
