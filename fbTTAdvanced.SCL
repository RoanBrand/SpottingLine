FUNCTION_BLOCK fbTTAdvanced
TITLE = '4-way TurnTable for HDEP Spotting line'
VERSION : '1.0'
KNOW_HOW_PROTECT
AUTHOR : 'RF Brand'
//******************************************************************************************//
VAR_INPUT
(* Physical Inputs *)
    iButton_Go : BOOL;   // Button used to initiate product transport
    //iButton_DirSel : BOOL;  // Select direction to turn TurnT when using DHS
    //iButton_DHS : BOOL;     // Dual-Handed Start button input
    iButton_SideIn : BOOL;// Latching switch. If High block will Receive from 4
    iButton_SendDir : BOOL; // 0->Fwd: Send product to 3. 1->Rev: Send prod to 4
    iButton_EStop : BOOL;   // Local EStop button
    iEStop_Global : BOOL;   // EStop Condition due to safety system.
    iPS1, iPS2 : BOOL;      // Rectoflective sensors near start and end of conveyor
    iPSHome_Stop : BOOL;    // Proxy to indicate TT stopped in Home position
    iPSHome_Slow : BOOL;    // Proxy to indicate slow region
    iPSPos1_Slow : BOOL;    // Proxy to indicate slow region
    iPSPos1_Stop : BOOL;    // Proxy to indicate TT stopped at 90deg
    iVSD_Rollers_F : BOOL;  // Rollers VSD Fault Alarm
    iVSD_TT_F : BOOL;   // Turntable VSD Fault Alarm
    //iSideInstakePS :BOOL;
(* Inter-Conveyor Messages *)
    //iNeigh : ARRAY[1..4] OF INT;    //      2     ^
    iNeigh1:INT; iNeigh2:INT; iNeigh4:INT;
    iConv3ReadyRecv : BOOL;         //      |     |
    //  0-Nothing                   //   3-[C]-4  ^
    //  1-AbletoReceive             //      |     |
    //  2-YouMaySend                //      1     ^
    //  3-ReqtoSend
    //  4-ProductCleared
    //  5-SendingProduct
    //  6-ProductReceived
    //  7-ProductTooEarly
    //  9-CancelTransaction
    //  10-Error
(* Other *)
    iManual_Mode_Req : BOOL;    // User Request Manual Control of conveyor
(* Settings *)
    xSensor_offDelay : TIME := t#200ms; // Off-Delay time for photosensors
END_VAR
VAR_OUTPUT
(* Physical Outputs *)
    oMotor_Rollers_Fwd : BOOL;  // Standard Conveyor Rollers
    oMotor_Rollers_Rev : BOOL;
    oMotor_TT_Fwd : BOOL;       // TurnTable Motor
    oMotor_TT_Rev : BOOL;
    oMotor_TT_Fast : BOOL;
    oLamp_Indication : BOOL;    // Status light
(* Inter-Conveyor Messages *)
    //oNeigh : ARRAY[1..4] OF INT;
    oNeigh1:INT;oNeigh2:INT;oNeigh4:INT;
(* Alarms *)
    oAlarmsOut : WORD;
    oAlarms AT oAlarmsOut : ARRAY[0..15] OF BOOL;
(*  oAlarms[0]  ->  "Go Button stuck"
    oAlarms[1]  ->  "Cannot confirm TT position"
    oAlarms[2]  ->  "Momentary Obstruction: Photosensor broken and remade too fast"
    oAlarms[3]  ->  "Cancel Receive Process: Prev Conv not Sending"
    oAlarms[4]  ->  "Receive Timeout: "Product stuck on Conveyor"
    oAlarms[5]  ->  "Obstruction on next Conv while Sending"
    oAlarms[6]  ->  "Product not leaving while sending"
    oAlarms[7]  ->  "TurnTable unable to move to Home pos"
    oAlarms[8]  ->  "TurnTable unable to move to Position 1" *)
END_VAR
VAR
(* FINITE STATE MACHINE FOR CONVEYOR*)
    oldState : INT;                // NI -> Not Implemented
    State : INT;            // 0-RESET;             10-DHSTURN(NI);
                            // 1-STANDBY;           11-GOTOHOME;
                            // 2-ABLETORECEIVE;     12-GOTOPOS1;
                            // 3-RECEIVING;         
                            // 4-RECEIVED(NI);      20-ESTOP;
                            // 5-ABLETOSEND;        21-VSDFAULT;
                            // 6-SENDING;           22-MANUAL;
                            
    internalState : INT;    // Sub Statemachine used in some states
(* Translate inter conveyor comms *)
    b_iNeigh : ARRAY[1..4] OF INT;
    b_oNeigh : ARRAY[1..4] OF INT;
(* Keep track of photosensors *)
    tPS1_Debounce : SFB4;
    tPS2_Debounce : SFB4;
    lastSensState : BOOL; // Keep track of photosensor state changes
    // Check IF photosensor is momentarily broken AND remade in short TIME
    Momentary_obstruction : BOOL; // This can happen due to vibration or hand
    tMomentary : SFB4; // Used to make alarm
(* Handle Go button presses *)
    tGoTime : SFB4;
(* Keep track of TurnTable position *)
    TT_Home : BOOL; // High if Turntable in Home pos
    TT_Pos1 : BOOL; // High if Turntable in Position 1
(* Manual Mode Button Control *)
    bM_HMI_Fwd : BOOL;
    bM_HMI_Rev : BOOL;
    bOld_Fwd : BOOL;
    bOld_Rev : BOOL;
(* Other *)   
    tTimer : SFB4; // IEC On-Delay timers used for timing sequences
    partnerConveyor : INT; // Used to keep track of which conv we are busy with
    product_sensed : BOOL; // Used to keep track if product arrived in Receive
END_VAR
BEGIN
(* Inputs processing *)
tGoTime(IN := iButton_Go, PT := t#8s);
oAlarms[0] := tGoTime.Q; // if Button is kept in longer than 8s it is an alarm
tPS1_Debounce(IN := iPS1, PT := xSensor_offDelay);  // add off delay to photosensors
tPS2_Debounce(IN := iPS2, PT := xSensor_offDelay);
TT_Home := iPSHome_Stop AND NOT (iPSPos1_Stop OR iPSPos1_Slow); // make sense of TT pos
TT_Pos1 := iPSPos1_Stop AND NOT (iPSHome_Stop OR iPSHome_Slow);
oAlarms[1] := (iPSPos1_Stop OR iPSPos1_Slow) AND (iPSHome_Stop OR iPSHome_Slow); // inputs are nonsense
(* Translate inter conveyor comms *)
b_iNeigh[1] := iNeigh1;b_iNeigh[2] := iNeigh2;b_iNeigh[4] := iNeigh4;
(* State Machine Control Flow *)
IF iEStop_Global THEN                               // Emergency stop gets top priority in program
    IF NOT (State = 20) THEN
        State := 20;
    END_IF;
ELSIF iVSD_Rollers_F OR iVSD_TT_F THEN              // After that VSD Failure
    State := 21;
ELSIF iManual_Mode_Req AND NOT (State = 22) THEN    // After that manual operation requests
    State := 22;
END_IF;
CASE State OF
    0 : // RESET
        tTimer(IN := false);
        b_oNeigh[1] := 0;b_oNeigh[2] := 0;b_oNeigh[3] := 0;b_oNeigh[4] := 0;
        oAlarmsOut := w#16#0; // 0x0000;
        oMotor_Rollers_Fwd := false;
        oMotor_Rollers_Rev := false;
        oMotor_TT_Fwd := false;
        oMotor_TT_Rev := false;
        oMotor_TT_Fast := false;
        oLamp_Indication := false;
        oldState := 0;
        IF (iPS1 OR iPS2) THEN // product on conv
            State := 1; // GOTO STANDBY
        ELSE // no detected product
            IF iButton_SideIn THEN  // TT selected to Rec from 4
                IF TT_Pos1 THEN // TT in Pos1 (connecting 3 & 4)
                    State := 2;     // GOTO ABLETORECEIVE
                ELSE
                    State := 12;    // GOTO GOTOPOS1
                END_IF;
            ELSE // TT selected to Rec from 1 & 2
                IF TT_Home THEN
                    State := 2;     // GOTO ABLETORECEIVE
                ELSE
                    State := 11;    // GOTO GOTOHOME
                END_IF;
            END_IF;
        END_IF;
    1 : // STANDBY
        IF oldState <> State THEN
            internalState := 0;
            oldState := State;
        END_IF;
        oLamp_Indication := m0.3;
        CASE internalState OF
            0 : IF iButton_Go THEN
                    internalState := 1;
                END_IF;
            1 : IF NOT iButton_Go THEN   // make sure button is released
                    IF (iPS1 OR iPS2) THEN // Product detected
                        IF TT_Pos1 THEN // TT already in sending pos
                            State := 5;         // GOTO ABLETOSEND
                        ELSE
                            State := 12;        // GOTO GOTOPOS1
                        END_IF;
                    ELSE IF iButton_SideIn THEN // TT setup to Rec from 4
                        IF TT_Pos1 THEN
                            State := 2;         // GOTO ABLETORECEIVE
                        ELSE
                            State := 12;        // GOTO GOTOPOS1
                        END_IF;
                    ELSE // TT setup to Rec from 1&2
                        IF TT_Home THEN // TT already in rec pos
                            State := 2;         // GOTO ABLETORECEIVE
                        ELSE
                            State := 11;        // GOTO GOTOHOME
                        END_IF;
                    END_IF; // TT selection
                    END_IF; // Prod detect
                END_IF; // Go Button
        END_CASE;
        IF oldState <> State THEN
            oLamp_Indication := false;
        END_IF;
    2 : // ABLETORECEIVE
        IF oldState <> State THEN
            internalState := 0;
            oLamp_Indication := true;
            oldState := State;
        END_IF;
        IF iButton_SideIn THEN
            IF NOT TT_Pos1 THEN
                State := 12;        // GOTO GOTOPOS1
            END_IF;
        ELSE
            IF NOT TT_Home THEN
                State := 11;        // GOTO GOTOHOME
            END_IF;
        END_IF;
        IF (iPS1 OR iPS2) THEN // product suddenly detected
            State := 1;             // GOTO STANDBY
        ELSIF (State = 2) THEN // This condition means TT still correct pos
            IF iButton_SideIn THEN
                b_oNeigh[1] := 0;b_oNeigh[2] := 0;b_oNeigh[4] := 1;
                IF (b_iNeigh[4] = 3) THEN
                    partnerConveyor := 4;
                    State := 3;     // GOTO RECEIVING
                END_IF;
            ELSE // not side intake
                b_oNeigh[1] := 1;b_oNeigh[2] := 1;b_oNeigh[4] := 0;
                IF (b_iNeigh[1] = 3) THEN
                    partnerConveyor := 1;
                    State := 3;     // GOTO RECEIVING
                ELSIF (b_iNeigh[2] = 3) THEN
                    partnerConveyor := 2;
                    State := 3;     // GOTO RECEIVING
                END_IF;
            END_IF; // side intake
        END_IF; // prod sens
        IF oldState <> State THEN
            b_oNeigh[1] := 0;
            b_oNeigh[2] := 0;
            b_oNeigh[4] := 0;
            oLamp_Indication := false;
        END_IF;
    3 : // RECEIVING
        IF oldState <> State THEN
            tTimer(IN := false);
            internalState := 0;
            b_oNeigh[partnerConveyor] := 2;
            IF (partnerConveyor = 1) THEN
                oMotor_Rollers_Fwd := true;
            ELSE
                oMotor_Rollers_Rev := true;
            END_IF;
            oldState := State;
        END_IF;
        oLamp_Indication := m0.5;
        CASE partnerConveyor OF
            1 : product_sensed := tPS2_Debounce.Q;
            2 : product_sensed := tPS1_Debounce.Q;
            4 : product_sensed := tPS1_Debounce.Q;
        END_CASE;
        CASE internalState OF
            0 : tTimer(IN := true, PT := t#1s);
                IF tTimer.Q THEN                        // Prev conv did not send
                    tTimer(IN := false);
                    b_oNeigh[partnerConveyor] := 9;       // Cancel operation
                    oAlarms[3] := true;                 // Generate HMI Alarm
                    oMotor_Rollers_Fwd := false;
                    oMotor_Rollers_Rev := false;
                    internalState := 10;
                ELSIF b_iNeigh[partnerConveyor] = 5 THEN  // Prev conv is sending
                    tTimer(IN := false);
                    b_oNeigh[partnerConveyor] := 0;          
                    internalState := 1;
                END_IF;
            1 : IF product_sensed THEN                 // Sensor set too early    
                    b_oNeigh[partnerConveyor] := 7;       // Tell prev conv product arrived too early
                    oMotor_Rollers_Fwd := false;
                    oMotor_Rollers_Rev := false;
                    internalState := 11;
                ELSIF b_iNeigh[partnerConveyor] = 4 THEN  // Prev conv is done    
                    internalState := 2;
                END_IF;
            2 : tTimer(IN := true, PT := t#10s);
                IF tTimer.Q THEN                        // Product failed to arrive
                    tTimer(IN := false);
                    oAlarms[4] := true;                 // Generate HMI Alarm
                    oMotor_Rollers_Fwd := false;
                    oMotor_Rollers_Rev := false;
                    internalState := 10;
                ELSIF product_sensed THEN              // Product has arrived
                    tTimer(IN := false);
                    b_oNeigh[partnerConveyor] := 6;
                    oMotor_Rollers_Fwd := false;
                    oMotor_Rollers_Rev := false;
                    internalState := 3;
                END_IF;
            3 : tTimer(IN := true, PT := t#550ms);
                IF NOT product_sensed THEN             // Suspect obstruction
                    Momentary_obstruction := true;
                    State := 1;         // GOTO STANDBY
                ELSIF tTimer.Q THEN                 // Assume product has arrived
                    IF NOT TT_Pos1 THEN
                        State := 12;    // GOTO GOTOPOS1
                    ELSE
                        State := 5;     // GOTO ABLETOSEND
                    END_IF;
                END_IF;
           10 : tTimer(IN := true, PT := t#2s);     // Wait
                IF tTimer.Q THEN
                    State := 1;         // GOTO STANDBY
                END_IF;
           11 : tTimer(IN := true, PT := t#550ms);  // Early Receive. Error by Prev Conv.
                IF NOT product_sensed THEN
                    Momentary_obstruction := true;
                    State := 1;         // GOTO STANDBY
                ELSIF tTimer.Q THEN
                    State := 1;         // GOTO STANDBY
                END_IF;
        END_CASE;
        IF b_iNeigh[partnerConveyor] = 9 THEN
            State := 1; // GOTO STANDBY
        END_IF;
        IF oldState <> State THEN
            b_oNeigh[partnerConveyor] := 0;
            oAlarms[3] := false;
            oAlarms[4] := false;
            oMotor_Rollers_Fwd := false;
            oMotor_Rollers_Rev := false;
            oLamp_Indication := false;
        END_IF;
    5 : // ABLETOSEND
        IF oldState <> State THEN
            internalState := 0;
            oLamp_Indication := true;
            oldState := State;
        END_IF;
        IF iButton_SendDir THEN // switch set to send to 4
            IF (b_iNeigh[4] = 1) AND (internalState = 0) THEN
                partnerConveyor := 4;
                internalState := 1;
            END_IF;
        ELSE //set to send to 3
            IF iConv3ReadyRecv AND (internalState = 0) THEN
                partnerConveyor := 3;
                State := 6; // GOTO SENDING
            END_IF;
        END_IF;
        IF NOT (tPS1_Debounce.Q OR tPS2_Debounce.Q)  THEN
            State := 1; // GOTO STANDBY
        ELSE CASE internalState OF
            0 : //b_oNeigh[3] := 0;
                b_oNeigh[4] := 0;
            1 : IF NOT iButton_Go THEN
                    tTimer(IN := false);
                    internalState := 2;
                END_IF;
            2 : tTimer(IN := true, PT := t#1s);
                b_oNeigh[partnerConveyor] := 3;
                IF tTimer.Q THEN
                    tTimer(IN := false);
                    internalState := 0;
                ELSIF (b_iNeigh[partnerConveyor] = 2) THEN
                    State := 6;    // GOTO SENDING
                END_IF;
        END_CASE;
        END_IF;
        IF oldState <> State THEN
            b_oNeigh[3] := 0;b_oNeigh[4] := 0;
            oLamp_Indication := false;
        END_IF;
    6 : // SENDING
        IF oldState <> State THEN
            tTimer(IN := false);
            internalState := 0;
            b_oNeigh[partnerConveyor] := 5;
            IF (partnerConveyor = 3) THEN
                oMotor_Rollers_Rev := true;
            ELSIF (partnerConveyor = 4) THEN
                oMotor_Rollers_Fwd := true;
            END_IF;
            lastSensState := false;
            oldState := State;
        END_IF;
        oLamp_Indication := m0.5;
        IF (partnerConveyor = 4) THEN
            product_sensed := tPS2_Debounce.Q;
        ELSE
            product_sensed := tPS1_Debounce.Q;
        END_IF;
        CASE internalState OF
            0 : tTimer(IN := true, PT := t#25s);
                IF tTimer.Q THEN                // Product not leaving
                    tTimer(IN := false);
                    b_oNeigh[partnerConveyor] := 9;
                    oAlarms[6] := true;
                    internalState := 10;
                ELSIF (b_iNeigh[partnerConveyor] = 7) THEN         // Next Conv reports obstruction
                    tTimer(IN := false);
                    oAlarms[5] := true;
                    internalState := 10;
                ELSIF lastSensState AND NOT product_sensed THEN     // Product has left the Conv
                    tTimer(IN := false);
                    b_oNeigh[partnerConveyor] := 4;
                    internalState := 1;
                END_IF;
                IF (tTimer.ET >= t#20s) THEN // Product taking too long to leave
                    oMotor_Rollers_Fwd := false;
                    oMotor_Rollers_Rev := false;
                END_IF;
            1 : tTimer(IN := true, PT := t#3s); // Keep on to clear product
                IF tTimer.Q OR (b_iNeigh[partnerConveyor] = 6) THEN
                    IF iButton_SideIn THEN
                        State := 2;     // GOTO ABLETORECEIVE
                    ELSE
                        State := 11;    // GOTO GOTOHOME
                    END_IF;
                END_IF;
           10 : tTimer(IN := true, PT := t#2s);
                oMotor_Rollers_Fwd := false; oMotor_Rollers_Rev := false;
                IF tTimer.Q THEN
                    State := 1; // GOTO STANDBY
                END_IF;
        END_CASE;
        lastSensState := product_sensed;
        IF oldState <> State THEN
            b_oNeigh[3] := 0;
            b_oNeigh[4] := 0;
            oAlarms[5] := false;
            oAlarms[6] := false;
            oMotor_Rollers_Fwd := false;
            oMotor_Rollers_Rev := false;
            oLamp_Indication := false;
        END_IF;
   11 : // GOTOHOME
        IF oldState <> State THEN
            tTimer(IN := false);
            oMotor_TT_Fast := true;
            oMotor_TT_Rev := true;
            internalState := 0;
            oldState := State;
        END_IF;
        tTimer(IN := true, PT := t#20s);
        oLamp_Indication := m0.5;
        IF iPSHome_Slow THEN
            oMotor_TT_Fast := false;
        END_IF;
        CASE internalState OF
            0 : IF tTimer.Q THEN
                    tTimer(IN := false);
                    internalState := 1;
                    oMotor_TT_Rev := false;
                ELSIF TT_Home THEN
                    State := 2;     // GOTO ABLETORECEIVE
                END_IF;
            1 : tTimer(IN := true, PT := t#2s);
                oAlarms[7] := true;
                IF tTimer.Q THEN
                    State := 1; // GOTO STANDBY
                END_IF;
        END_CASE;
        IF oldState <> State THEN
            oAlarms[7] := false;
            oMotor_TT_Fast := false;
            oMotor_TT_Rev := false;
            oLamp_Indication := false;
        END_IF;
   12 : // GOTOPOS1
        IF oldState <> State THEN
            tTimer(IN := false);
            oMotor_TT_Fast := true;
            oMotor_TT_Fwd := true;
            internalState := 0;
            oldState := State;
        END_IF;
        tTimer(IN := true, PT := t#20s);
        oLamp_Indication := m0.5;
        IF iPSPos1_Slow THEN
            oMotor_TT_Fast := false;
        END_IF;
        CASE internalState OF
            0 : IF tTimer.Q THEN
                    tTimer(IN := false);
                    internalState := 1;
                    oMotor_TT_Fwd := false;
                ELSIF TT_Pos1 THEN
                    IF (iPS1 OR iPS2) THEN
                        State := 5;     // GOTO ABLETOSEND
                    ELSE
                        State := 2;     // GOTO ABLETORECEIVE
                    END_IF;
                END_IF;
            1 : tTimer(IN := true, PT := t#2s);
                oAlarms[8] := true;
                IF tTimer.Q THEN
                    State := 1; // GOTO STANDBY
                END_IF;
        END_CASE;
        IF oldState <> State THEN
            oAlarms[8] := false;
            oMotor_TT_Fast := false;
            oMotor_TT_Fwd := false;
            oLamp_Indication := false;
        END_IF;
        (*
   15 : // RECEIVEBLIND
        IF oldState <> State THEN
            tTimer(IN := false);
            oMotor_Rollers_Rev := true;
            oldState := State;
        END_IF;
        oLamp_Indication := m0.5;
        tTimer(IN := true, PT := t#20s);
        IF tTimer.Q THEN
            State := 1; // GOTO STANDBY
        ELSIF tPS1_Debounce.Q THEN
            State := 5; // GOTO ABLETOSEND
        END_IF;
        IF oldState <> State THEN
            oMotor_Rollers_Rev := false;
            oLamp_Indication := false;
        END_IF;
   16 : // temp send to side intake
        IF oldState <> State THEN
            tTimer(IN := false);
            oMotor_Rollers_Fwd := true;
            lastSensState := false;
            oldState := State;
        END_IF;
        oLamp_Indication := m0.5;
        tTimer(IN := true, PT := t#20s);
        IF tTimer.Q THEN
            State := 1; // GOTO STANDBY
        ELSIF lastSensState AND NOT tPS2_Debounce.Q THEN
            State := 2; // GOTO ABLETORECEIVE
        END_IF;
        lastSensState := tPS2_Debounce.Q;
        IF oldState <> State THEN
            oMotor_Rollers_Fwd := false;
            oLamp_Indication := false;
        END_IF;
        *)
   20 : // ESTOP
        IF oldState <> State THEN
            oMotor_Rollers_Fwd := false;
            oMotor_Rollers_Rev := false;
            oMotor_TT_Fwd := false;
            oMotor_TT_Rev := false;
            oMotor_TT_Fast := false;
            oldState := State;
        END_IF;
        //oAlarms[0] := iButton_EStop;
        IF iButton_EStop THEN
            oLamp_Indication := m0.2;
        ELSE
            oLamp_Indication := m0.5;
        END_IF;
        IF NOT iEStop_Global THEN
            State := 0; // GOTO RESET
        END_IF;
   21 : // VSDFAULT
        IF oldState <> State THEN
            b_oNeigh[1] := 9;b_oNeigh[3] := 9;
            b_oNeigh[2] := 9;b_oNeigh[4] := 9;
            oldState := State;
        END_IF;
        IF NOT (iVSD_Rollers_F OR iVSD_TT_F) THEN
            State := 0; // GOTO RESET
        END_IF;
   22 : // MANUAL
        IF oldState <> State THEN
            b_oNeigh[1] := 0;
            b_oNeigh[2] := 0;
            bM_HMI_Fwd := false;
            bM_HMI_Rev := false;
            oMotor_Rollers_Fwd := false;
            oMotor_Rollers_Rev := false;
            oldState := State;
        END_IF;
        oLamp_Indication := m0.7;
        IF oMotor_Rollers_Fwd AND NOT bOld_Fwd THEN // HMI control
            bM_HMI_Fwd := true;
        ELSIF bOld_Fwd AND NOT oMotor_Rollers_Fwd THEN
            bM_HMI_Fwd := false;
        END_IF;
        IF oMotor_Rollers_Rev AND NOT bOld_Rev THEN
            bM_HMI_Rev := true;
        ELSIF bOld_Rev AND NOT oMotor_Rollers_Rev THEN
            bM_HMI_Rev := false;
        END_IF;
        oMotor_Rollers_Fwd := bM_HMI_Fwd OR (iButton_Go AND NOT tGoTime.Q AND NOT iButton_SideIn);
        oMotor_Rollers_Rev := bM_HMI_Rev OR (iButton_Go AND NOT tGoTime.Q AND iButton_SideIn);
        bOld_Fwd := oMotor_Rollers_Fwd;
        bOld_Rev := oMotor_Rollers_Rev;
        IF oMotor_Rollers_Fwd OR oMotor_Rollers_Rev THEN
            oLamp_Indication := m0.1;
        END_IF;
        IF NOT iManual_Mode_Req THEN
            State := 0; // Goto RESET
        END_IF;
END_CASE;
(* Translate inter conveyor comms *)
oNeigh1 := b_oNeigh[1];oNeigh2 := b_oNeigh[2];oNeigh4 := b_oNeigh[4];
(* Generate Momentary Obstruction Alarm *)
IF tMomentary.Q THEN
    Momentary_obstruction := false;
END_IF;
tMomentary(IN := Momentary_obstruction, PT := t#2s);
oAlarms[2] := Momentary_obstruction;
END_FUNCTION_BLOCK
